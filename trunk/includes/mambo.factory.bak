<?php
/**
* @version $Id: mambo.factory.bak 4 2005-09-06 19:22:37Z akede $
* @package Mambo
* @copyright (C) 2000 - 2005 Miro International Pty Ltd
* @license http://www.gnu.org/copyleft/gpl.html GNU/GPL
* Mambo is Free Software
*/

/** ensure this file is being included by a parent file */
defined( '_VALID_MOS' ) or die( 'Direct Access to this location is not allowed.' );

/**
 * The Mambo Factory class
 * @package Mambo
 */
class mosFactory {
	/**
	* Load language files
	* The function will load the common language file of the system and the
	* special files for the actual component.
	* The module related files will be loaded automatically
	* 
	* @subpackage Language
	* @param string		actual component which files should be loaded
	* @param boolean	admin languages to be loaded?
	*/
	function createLanguage( $option=null, $isAdmin=false ) {
		global $mosConfig_absolute_path, $mainframe;
		global $mosConfig_lang, $my;

		mosFS::load ( 'includes/mambo.language.php' );

		$mosConfig_admin_path = $mosConfig_absolute_path .'/administrator';		
		$path = $mosConfig_absolute_path . '/language/';
			
		if ( $my && isset( $my->params ) && $lang = $my->params->get( 'language' ) ) {
			// if admin && special lang?
			if( $mainframe && $mainframe->isAdmin() ) {
				$lang = $my->params->get( 'admin_language', $lang );
			}
			$mosConfig_lang = $lang;
		}

		// Checks if the session does have different values
		if( $mainframe ) {
			$mosConfig_lang = $mainframe->getUserState( 'lang', $mosConfig_lang );
		}
		
		// loads english language file by default
		if ( $mosConfig_lang == '' ) {
			$mosConfig_lang = 'english';
		}
	
		// load the site language file (the old way - to be deprecated)
		$file = $path . $mosConfig_lang .'.php';
		if (file_exists( $file )) {
			require_once( $path . $mosConfig_lang .'.php' );
		} else {
			$file = $path .'english.php';
			if ( file_exists( $file ) ) {
				require_once( $file );
			} else {
				$file = $mosConfig_absolute_path . '/language/english.php';
				if (file_exists( $file )) {
					require_once( $file );
				}
			}
		}
	
		$_LANG =& new mosLanguage();
		$_LANG->loadAll( $path, $mosConfig_lang, $option );
		if ($isAdmin) {
			$_LANG->loadAll( $path, $mosConfig_lang, $option );
		}
	
		// backward compatibility for templates
		if ( !defined( '_ISO') ) {
			define( '_ISO', 'charset=' . $_LANG->iso() );
		}
		
		// make sure the locale setting is correct
		setlocale( LC_ALL, $_LANG->locale() );
		
		return $_LANG;
	}
	
	/**
	 * @param string The url option
	 * @param array An array of additional template files to load
	 * @param boolean True to use caching
	 */
	function &createPatTemplate( $option, $files=null, $useCache=false  ) {
		global $mainframe, $_LANG, $mosConfig_absolute_path, $mosConfig_live_site;
		
		$path = $mosConfig_absolute_path . '/includes/patTemplate';
		
		require_once( $path .'/patTemplate.php' );
		$tmpl =& new patTemplate;

		// patTemplate
		if ($useCache) {
			$info = array( 
						'cacheFolder' 	=> $GLOBALS['mosConfig_cachepath'], 
						'lifetime' 		=> 20 
					);
	   		$tmpl->useTemplateCache( 'File', $info );
		}

		$tmpl->setNamespace( 'mos' );

		// load the wrapper and common templates
		$tmpl->setRoot( $path .'/tmpl' );
		$tmpl->readTemplatesFromFile( 'page.html' );
		$tmpl->applyInputFilter('ShortModifiers');
		
		if ( is_array( $files ) ) {
			foreach ( $files as $file ) {
				$tmpl->readTemplatesFromFile( $file );
			}
		}

		$tmpl->addGlobalVar( 'option', 				$option );
		$tmpl->addGlobalVar( 'self', 				$_SERVER['PHP_SELF'] );
		$tmpl->addGlobalVar( 'itemid', 				$GLOBALS['Itemid'] );
		$tmpl->addGlobalVar( 'siteurl', 			$mosConfig_live_site );
		$tmpl->addGlobalVar( 'adminurl', 			$mosConfig_live_site .'/administrator' );
		$tmpl->addGlobalVar( 'admintemplateurl', 	$mosConfig_live_site .'/administrator/templates/'. $mainframe->getTemplate() );
		$tmpl->addGlobalVar( 'sitename', 			$GLOBALS['mosConfig_sitename'] );

		$tmpl->addGlobalVar( 'page_encoding', 		$_LANG->iso() );
		$tmpl->addGlobalVar( 'version_copyright', 	$GLOBALS['_VERSION']->COPYRIGHT );
		$tmpl->addGlobalVar( 'version_url', 		$GLOBALS['_VERSION']->URL );

		$tmpl->addVar( 'form', 'formAction', 		$_SERVER['PHP_SELF'] );
		$tmpl->addVar( 'form', 'formName', 			'adminForm' );
		
		if ($_LANG->iso()) {
			$tmpl->addGlobalVar( 'lang_iso', 		$_LANG->iso() );
			$tmpl->addGlobalVar( 'lang_charset', 	'charset=' . $_LANG->iso() );
		} else {
			// TODO: Try and determine the charset from the browser
			$tmpl->addGlobalVar( 'lang_iso', 		'iso-8859-1' );
			$tmpl->addGlobalVar( 'lang_charset',	'charset=iso-8859-1' );
		}
 
		if ($_LANG->rtl()) {
			$tmpl->addGlobalVar('treecss', 'dtree_rtl.css');
			$tmpl->addGlobalVar('treeimgfolder', 'img_rtl');
		} else {
			$tmpl->addGlobalVar('treecss', 'dtree.css');
			$tmpl->addGlobalVar('treeimgfolder', 'img');
		}

		// tabs
		$tpath = mosFS::getNativePath( $mainframe->getTemplatePath() . 'images/tabs' );
		if (is_dir( $tpath )) {
			$turl = $mainframe->getTemplateURL() .'/images/tabs/';
		} else {
			$turl = $mosConfig_live_site .'/includes/js/tabs/';
		}
		$tmpl->addVar( 'includeTabs', 'taburl', $turl );

		return $tmpl;
	}
	
	/**
	 * Creates an access control object
	 * @param object A mambo database object
	 * @return object
	 */
	function &createACL( &$database ) {
		global $mosConfig_absolute_path;
		
		$path = $mosConfig_absolute_path . '/includes/phpgacl';
		
		require_once( $path .'/gacl.class.php' );
		require_once( $path .'/gacl_api.class.php' );
		require_once( $path .'/gacl.mambo.php' );

		$acl =& new mambo_acl_api(
			array(
				'db' 				=> &$database->_resource,
				'db_table_prefix' 	=> $database->getPrefix() . 'core_acl_',
				'debug' 			=> 0
			)
		);
		return $acl;
	}

	/**
	 * Creates a mosSerializer object
	 * @return object
	 */
	function &createSerializer() {
		global $mosConfig_absolute_path;

		require_once( $mosConfig_absolute_path . '/includes/mambo.serialize.php' );

		$obj = new mosSerializer();
		
		return $obj;
	}
}
?>