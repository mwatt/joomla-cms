<?php
/**
* @version $Id: rss.php 1977 2006-01-25 14:19:45Z stingrey $
* @package Joomla
* @subpackage Syndicate
* @copyright Copyright (C) 2005 Open Source Matters. All rights reserved.
* @license http://www.gnu.org/copyleft/gpl.html GNU/GPL, see LICENSE.php
* Joomla! is free software. This version may have been modified pursuant
* to the GNU General Public License, and as distributed it includes or
* is derivative of works licensed under the GNU General Public License or
* other free or open source software licenses.
* See COPYRIGHT.php for copyright notices and details.
*/

// no direct access
defined( '_JEXEC' ) or die( 'Restricted access' );

// load feed creator class
jimport('bitfolge.feedcreator');

//check if cache diretory is writable as cache files will be created for the feed
$cacheDir = $mosConfig_cachepath .'/';
if ( !is_writable( $cacheDir ) ) {
	echo '<div>';
	echo JText::_( 'Please make cache directory writable.' );
	echo '</div>';
	
	return;
}


$feed = JRequest::getVar( 'feed', '', 'get' );

if ( $feed ) {
	syndicate( $feed );
}

function syndicate( $feed ) {
	global $database;
	global $mainframe, $Itemid;  	
	
	// security access checks, to ensure that only `activated` links are accessible
	// check if this is a live bookmark link, or a link generated by the mod_syndicate module
	$live = JRequest::getVar( 'live', 0, 'get', 'int' );		
	if ( $live ) {		// menu parameters
		$_Itemid = JRequest::getVar( 'Itemid', null, '', 'int' );
		
		// meu paramss
		$menu = new mosMenu( $database );
		$menu->load( $Itemid );
		$MenuParams 	= new JParameter( $menu->params );
		$live_bookmark 	= $MenuParams->def( 'live_bookmark', '' );			
		
		// test if live bookmark is enabled for the menu page and it is the correct feed type enabled
		// if not disable syndication access
		if ( !$live_bookmark || ( $live_bookmark != $feed ) ) {
			mosNotAuth();
			return;		
		}
	} else {
		// menus module appears
		$query = "SELECT mm.menuid"
		. "\n FROM #__modules_menu AS mm"
		. "\n LEFT JOIN #__modules AS m ON mm.moduleid = m.id"		
		. "\n AND m.module = 'mod_syndicate'"
		. "\n WHERE m.published = 1"
		;
		$database->setQuery( $query );
		$menuids = $database->loadResultArray();
		
		// test if module is enabled for the menu page
		// if not disable syndication access
		if(empty($menuids)) {
			mosNotAuth();
			return;		
		} else if($menuids[0] != 0) {
			if(!in_array($Itemid,$menuids)) {
				mosNotAuth();
				return;
			}				
		}
	}
	
	// pull id of syndication component
	$query = "SELECT a.id"
	. "\n FROM #__components AS a"
	. "\n WHERE a.option = 'com_syndicate'"
	;
	$database->setQuery( $query );
	$id = $database->loadResult();
	
	// load syndication parameters
	$component =& JTable::getInstance('component', $database );
	$component->load( $id );
	$params = new JParameter( $component->params );
	
	$limit		= $params->def( 'count', 5 );	
	$from       = $_SERVER['QUERY_STRING'];
	
	// trigger Syndicate bots
	JPluginHelper::importPlugin( 'syndicate' );
	$results = $mainframe->triggerEvent( 'onSyndicate', array( $from, $limit ) );

	$num   = 'a';
	$count = count( $results );	
	for( $i=0; $i < $count; $i++ ) {
		if ( count( $results[$i] ) ) {
			$num = $i;
		}
	}	
	if ( is_int( $num ) ) {
		// test to check whether a bot exists for this component
		parse_str( $from, $parts );    
		
		$info       = null;
		$rss        = null;
		$filename   = explode( 'type=', $from ); 

		$menu = new JTableMenu( $database );
		$menu->load( $parts['Itemid'] );    	
		
		constructFeed( $results[$num], $parts['feed'], $filename[1], $menu->name, $params, true );    
	} else {
		mosNotAuth();
		return;		
	}
}

/*
* Creates feed from data fed to it from syndicate bots
*/
function constructFeed( $rows, $feed, $filename, $title, &$params, $showFeed=true ) {
	global $mainframe;
	global $mosConfig_offset, $mosConfig_cachepath;
	
	$now 	= date( 'Y-m-d H:i:s', time() + $mosConfig_offset * 60 * 60 );
	
	// parameter intilization
	$info[ 'date' ] 			= date( 'r' );
	$info[ 'year' ] 			= date( 'Y' );
	$info[ 'encoding' ] 		= 'utf-8';
	$info[ 'link' ] 			= htmlspecialchars( $mainframe->getBaseURL() );
	$info[ 'cache' ] 			= $params->def( 'cache', 1 );
	$info[ 'cache_time' ] 		= $params->def( 'cache_time', 3600 );
	$info[ 'count' ]			= $params->def( 'count', 5 );
	$info[ 'orderby' ] 			= $params->def( 'orderby', '' );
	$info[ 'title' ] 			= $params->def( 'title', 'Joomla!' );
	$info[ 'title' ] 			.= ' - '. $title; 
	$info[ 'description' ] 		= $params->def( 'description', 'Joomla! Site Syndication' );
	$info[ 'description' ] 		.= ' - '. $title .' Section'; 
	$info[ 'image_file' ]		= $params->def( 'image_file', 'joomla_rss.png' );
	if ( $info[ 'image_file' ] == -1 ) {
		$info[ 'image' ]		= NULL;
	} else {
		$info[ 'image' ]		= 'images/M_images/'. $info[ 'image_file' ];
	}
	$info[ 'image_alt' ] 		= $params->def( 'image_alt', 'Powered by Joomla!' );
	$info[ 'limit_text' ] 		= $params->def( 'limit_text', 1 );
	$info[ 'text_length' ] 		= $params->def( 'text_length', 20 );
	// get feed type from url
	$info[ 'feed' ] 			= $feed;
	// live bookmarks
	$info[ 'live_bookmark' ]	= $params->def( 'live_bookmark', '' );
	$info[ 'bookmark_file' ]	= $params->def( 'bookmark_file', '' );

	// set filename
	if ( $showFeed ) {
		// set filename for rss feeds
		$info[ 'file' ]   = strtolower( str_replace( '.', '', $info[ 'feed' ] ) );
		$info[ 'file' ]   = $mosConfig_cachepath .'/'. $info[ 'file' ] .'_'. $filename .'.xml';
	}	

	// load feed creator class
	$syndicate 	= new UniversalFeedCreator();
	// load image creator class
	$image 	= new FeedImage();
	
	// loads cache file
	if ( $showFeed && $info[ 'cache' ] ) {
		$syndicate->useCached( $info[ 'feed' ], $info[ 'file' ], $info[ 'cache_time' ] );
	}
	
	$syndicate->title 			= $info[ 'title' ];
	$syndicate->description 	= $info[ 'description' ];
	$syndicate->link 			= $info[ 'link' ];
	$syndicate->syndicationURL 	= $info[ 'link' ];
	$syndicate->cssStyleSheet 	= NULL;
	$syndicate->encoding 		= $info[ 'encoding' ];
	
	if ( $info[ 'image' ] ) {
		$image->url 			= $info[ 'image' ];
		$image->link 			= $info[ 'link' ];
		$image->title 			= $info[ 'image_alt' ];
		$image->description		= $info[ 'description' ];
		// loads image info into rss array
		$syndicate->image 		= $image;
	}
	
	foreach ( $rows as $row ) {
		// strip html from feed item title
		$item_title = htmlspecialchars( $row->title );
		$item_title = html_entity_decode( $item_title );
		
		// url link to article
		$item_link = $row->link;
		$item_link = sefRelToAbs( $item_link );
		
		// strip html from feed item description text
		$item_description = $row->description;
		$item_description = mosHTML::cleanText( $item_description );
		$item_description = html_entity_decode( $item_description );
		
		if ( $info[ 'limit_text' ] ) {
			if ( $info[ 'text_length' ] ) {
				// limits description text to x words
				$item_description_array = split( ' ', $item_description );
				$count = count( $item_description_array );
				if ( $count > $info[ 'text_length' ] ) {
					$item_description = '';
					for ( $a = 0; $a < $info[ 'text_length' ]; $a++ ) {
						$item_description .= $item_description_array[$a]. ' ';
					}
					$item_description = trim( $item_description );
					$item_description .= '...';
				}
			} else  {
				// do not include description when text_length = 0
				$item_description = NULL;
			}
		}
		
		$item_date = ( $row->date ? date( 'r', $row->date ) : '' );
		
		// load individual item creator class
		$item = new FeedItem();
		// item info
		$item->title 		= $item_title;
		$item->link 		= $item_link;
		$item->description 	= $item_description;
		$item->source 		= $info[ 'link' ];
		$item->date			= $item_date;
		$item->category   	= $row->category;
		
		// loads item info into rss array
		$syndicate->addItem( $item );
	}
	
	// save feed file
	$syndicate->saveFeed( $info[ 'feed' ], $info[ 'file' ], $showFeed );
}	
?>