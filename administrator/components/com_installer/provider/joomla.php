<?php

class JInstallerStandaloneProviderJoomla extends JInstallerStandaloneProvider {

  /**
   * [reset description]
   * @return [type] [description]
   */
  public function reset(){
  }

  /**
   * [buildInstaller description]
   * @return [type] [description]
   */
  public function buildInstaller(){

    // Stage
      $app            = JFactory::getApplication();
      $package        = $this->get('package');
      $installer_path = $this->get('installer_path');
      $installer_file = $this->get('installer_file');
      $installer_site = $this->get('installer_site');

    // Prepare
      $callUrl   = JFactory::getApplication()->getUserState('com_installer.installer.callurl', null);
      $returnUrl = JFactory::getApplication()->getUserState('com_installer.installer.returnurl', null);

    // JS COnfig for Monitor
      JFactory::getDocument()->addScriptDeclaration("
      jQuery(document).ready(function(){
        com_installer_execute({
          'callurl': '$callUrl',
          'returnurl': '$returnUrl'
        });
      });
      ");

    // Load scripts for Monitor
      JHtml::_('jquery.framework');
      JFactory::getDocument()->addScript(JUri::root(true) . '/media/com_installer/joomla/installer.js', false, true, false);

    // Build list
      $targetPathRegex = trim(str_replace('/', '.', $installer_site), '.');
      $installerBuildList = array(
        array(
          "",
          "/*",
          "  Generated by " . __FILE__,
          "  " . gmdate('Y-m-d H:i:s'),
          "*/",
          "",
          "if( !preg_match('/{$targetPathRegex}/', __DIR__) ){ exit; }",
          ""
          ),
        $this->createInstallerConfig(),
        __DIR__ . '/joomla/installer.php'
        );

    // Build installer file
      $fh = fopen( $installer_path . $installer_file, 'w+' );
      if( $fh ){
        $bytesWritten = 0;
        foreach( $installerBuildList AS $item ){
          if( !$bytesWritten ){
            $tmpBuffer = '<?php';
            fwrite( $fh, $tmpBuffer );
            $bytesWritten += strlen( $tmpBuffer );
          }
          if( is_array($item) ){
            fwrite( $fh, "\n\n");
            fwrite( $fh, "/*\n  Code Block \n*/");
            fwrite( $fh, "\n\n");
            fwrite( $fh, implode("\n", $item) );
          }
          else if( is_string($item) && is_readable($item) ){
            $fa = fopen( $item, 'r' );
            if( $fa ){
              fwrite( $fh, "\n\n");
              fwrite( $fh, "/*\n  Source\n  ".$item.' / '.filesize($item)."\n*/");
              fwrite( $fh, "\n\n");
              $bytesRead = 0;
              while( !feof($fa) && $buffer = fread($fa, 1024 * 10) ){
                if( $bytesRead == 0 && preg_match('/^\<\?(php|)[\s\r\n]+/',$buffer) ){
                  $bytesRead += strlen( $buffer );
                  $tmpBuffer = preg_replace('/^\<\?(php|)[\s\r\n]+/', '', $buffer);
                  $bytesWritten += strlen( $tmpBuffer );
                  $buffer = $tmpBuffer;
                }
                else {
                  $bytesRead += strlen( $buffer );
                  $bytesWritten += strlen( $buffer );
                }
                fwrite( $fh, $buffer );
              }
              fclose( $fa );
            }
            else {
              $app->enqueueMessage(JText::_('COM_INSTALLER_STANDALONE_BUILD_FAILED'), 'error');
              return false;
            }
          }
        }
        fclose( $fh );
      }
      else {
        $app->enqueueMessage(JText::_('COM_INSTALLER_STANDALONE_NOT_WRITABLE'), 'error');
        return false;
      }
      if( !is_readable($installer_path . $installer_file) ){
        $app->enqueueMessage(JText::_('COM_INSTALLER_STANDALONE_NOT_WRITABLE'), 'error');
        return false;
      }

    // Success
      return true;

  }

  /**
   * [createInstallerConfig description]
   * @return [type] [description]
   */
  private function createInstallerConfig()
  {

    // Stage
      $package    = $this->get('package');

    // Result
      $result = array();
      $result[] = "\$com_installer_config = array(";
      $result[] = "  'jpath_base' => '". JPATH_BASE ."',";
      $result[] = "  'package' => array(";
      foreach( $package AS $key => $var ){
        $result[] = "    '$key' => '$var',";
      }
      $result[] = "  )";
      $result[] = ");";

    // Complete
      return $result;

  }

}